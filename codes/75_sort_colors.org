#+title: 75. Sort Colors
#+tags: Sorting, Inplace Sort, Array Manipulation

* Problem
Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Example 1:

Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
Example 2:

Input: nums = [2,0,1]
Output: [0,1,2]


Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.

* Idea

Maintain two partitions for the demarcation of 0, 1 and 2. As we encounter a
value, swap it with corresponding partition boundary and increase the boundary.
For the case of 2, there may be 0 where we want to swap. In that case, we do not
increment the pointer so that we may check it again for 0.


* Code

#+begin_src python
class Solution:
    def sortColors(self,nums):
        if len(nums) == 1:
            return
        # Left Partition ke left me 0
        # Right Partition ke right me 2
        l = 0
        r = len(nums) - 1

        i = 0

        def swap(i,j):
            nums[i],nums[j] = nums[j],nums[i]

        while i <= r:
            if nums[i] == 0:
                swap(l,i)
                l+=1
            elif nums[i] == 2:
                swap(r,i)
                r-=1
                #Do not increment i
                i -=1
            i+=1

c = Solution()
nums = [2,0,2,1,1,0]
c.sortColors(nums)
return nums

#+end_src

#+RESULTS:
| 0 | 0 | 1 | 1 | 2 | 2 |
