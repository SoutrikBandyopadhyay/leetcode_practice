#+title: 560. Subarray Sum Equals K

[[https://leetcode.com/problems/subarray-sum-equals-k/description/][Link]]

* Problem

Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.



Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2


Constraints:

- 1 <= nums.length <= 2 * 104
- -1000 <= nums[i] <= 1000
- -107 <= k <= 107

* Idea
We can compute the prefix sum until know and keep count of it in a hashmap. if
we observe that prefixsum-k is present, we can increment the answer by the count
corresponding to it.

* Code

#+begin_src python
import sys
def subarraySum(nums,k):
    # Prefix Sum with count

    #Hash map contains the prefix sum and count
    hm = {}

    ans = 0
    s = 0
    for i in range(len(nums)):
        if s in hm.keys():
            hm[s] +=1
        else:
            hm[s] = 1
        s+= nums[i]

        target = s - k
        if target in hm.keys():
            ans += hm[target]



    return ans

return subarraySum([1,2,3],3)

#+end_src

#+RESULTS:
: 2
